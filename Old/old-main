import gym
import numpy as np
from ppo_torch import Agent
from utils import plot_learning_curve


if __name__ == '__main__':
    env = gym.make('CartPole-v1')
    N = 20
    batch_size = 5
    n_epochs = 4
    alpha = 0.0003
    agent = Agent(n_actions=env.action_space.n, input_dims=env.observation_space.shape, alpha=alpha,
                  batch_size=batch_size, n_epochs=n_epochs)
    n_games = 300

    figure_file = 'plots/cartpole.png'

    best_score = env.reward_range[0]
    score_history = []

    learn_iters = 0
    avg_score = 0
    n_steps = 0

    for i in range(n_games):
        # Handle the new Gym API return format
        observation, _ = env.reset()  # Extract only the observation array

        done = False
        score = 0
        while not done:
            action, prob, val = agent.choose_action(observation)
            observation_, reward, done, truncated, info = env.step(action)  # Extract components

            n_steps += 1
            score += reward

            # Store the necessary info in memory
            agent.remember(observation, action, prob, val, reward, done or truncated)

            observation = observation_  # Update observation

            if n_steps % N == 0:
                agent.learn()
                learn_iters += 1

        score_history.append(score)
        avg_score = np.mean(score_history[-100:])

        if avg_score > best_score:
            best_score = avg_score
            agent.save_models()

        print('episode', i,
              'score %.1f' % score,
              'avg_score %.1f' % avg_score,
              'time_steps', n_steps,
              'learning_steps', learn_iters)
